{"version":3,"file":"static/js/387.ea688b03.chunk.js","mappings":"wTAEAA,EAAAA,EAAAA,SAAAA,QAAyB,+BACzBA,EAAAA,EAAAA,SAAAA,QAAAA,OAAAA,cACE,6NAEK,IAAMC,EAAmB,mCAAG,WAAMC,GAAN,uFACVF,EAAAA,EAAAA,IAAU,uBAAwBE,GADxB,cAC3BC,EAD2B,OAEjCC,QAAQC,IAAIF,EAASG,KAAKC,SAFO,kBAG1BJ,EAASG,KAAKC,SAHY,2CAAH,sDAMnBC,EAAc,mCAAG,WAAOC,EAASP,GAAhB,uFACLF,EAAAA,EAAAA,IAAA,iBAAoBS,GAAWP,GAD1B,cACtBC,EADsB,yBAErBA,EAASG,MAFY,2CAAH,wDAKdI,EAAoB,mCAAG,WAAOD,EAASP,GAAhB,uFACXF,EAAAA,EAAAA,IAAA,iBAAoBS,EAApB,YAAuCP,GAD5B,cAC5BC,EAD4B,yBAE3BA,EAASG,KAAKK,MAFa,2CAAH,wDAKpBC,EAAqB,mCAAG,WAAOH,EAASP,GAAhB,uFACZF,EAAAA,EAAAA,IAAA,iBAAoBS,EAApB,YAAuCP,GAD3B,cAC7BC,EAD6B,yBAE5BA,EAASG,KAAKC,SAFc,2CAAH,wDAKrBM,EAAgB,mCAAG,WAAOC,EAASC,GAAhB,uFACPf,EAAAA,EAAAA,IAAA,yBACrBgB,OAAQ,CACNC,SAAU,QACVC,MAAOJ,EACPK,eAAe,IAEdJ,IAPyB,cACxBZ,EADwB,yBASvBA,EAASG,KAAKC,SATS,2CAAH,uD,4JCzBhBa,EAAaC,EAAAA,GAAAA,GAAH,iGAOVC,EAAYD,EAAAA,GAAAA,EAAH,gE,SCyCtB,EA7Ca,WACX,OAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQhB,GAAYiB,EAAAA,EAAAA,MAAZjB,SAERkB,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAkB,IAAIC,gBACtBC,EAAW,mCAAG,8GAEKpB,EAAAA,EAAAA,IAAqBD,EAAS,CACjDsB,OAAQH,EAAgBG,SAHV,OAEVC,EAFU,OAKhBP,EAAWO,GALK,gDAOhB5B,QAAQC,IAAI,KAAM4B,SAPF,yDAAH,qDAYjB,OAFAH,IAEO,WACLF,EAAgBM,OACjB,CACF,GAAE,CAACzB,IAEJ,IAAM0B,GAAgBC,EAAAA,EAAAA,UACpB,kBAAMZ,EAAQa,QAAO,SAAAC,GAAK,OAAIA,EAAMC,WAAa,EAAvB,GAA1B,GACA,CAACf,IAIH,OAFApB,QAAQC,IAAI8B,IAGV,SAACf,EAAD,UACGe,EAAcK,KAAI,gBAAGC,EAAH,EAAGA,cAAeC,EAAlB,EAAkBA,aAAcC,EAAhC,EAAgCA,GAAhC,OACjB,2BACE,gBACEC,IAAG,8CAAyCF,GAC5CG,IAAKJ,EACLK,MAAM,SAER,SAACxB,EAAD,UAAYmB,MANLE,EADQ,KAYxB,C","sources":["FetchAPI.js","components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.headers.common['Authorization'] =\n  'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI4YTljNGVmNDAyODAwODUxODhjZWZjMmU4N2FmNmEwYyIsInN1YiI6IjY0MTk3YmI2MzEwMzI1MDA4NmY5OTkzOSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.q-ovqu-7T5oRDliML0kPyxUZJ15bJ1hjveunlXRTE9s';\n\nexport const fetchTrendingMovies = async param => {\n  const response = await axios.get('/trending/movie/week', param);\n  console.log(response.data.results);\n  return response.data.results;\n};\n\nexport const fetchMovieById = async (movieId, param) => {\n  const response = await axios.get(`/movie/${movieId}`, param);\n  return response.data;\n};\n\nexport const fetchMovieActorsById = async (movieId, param) => {\n  const response = await axios.get(`/movie/${movieId}/credits`, param);\n  return response.data.cast;\n};\n\nexport const fetchMovieReviewsById = async (movieId, param) => {\n  const response = await axios.get(`/movie/${movieId}/reviews`, param);\n  return response.data.results;\n};\n\nexport const fetchSearchMovie = async (request, extraParam) => {\n  const response = await axios.get(`/search/movie`, {\n    params: {\n      language: 'en-US',\n      query: request,\n      include_adult: false,\n    },\n    ...extraParam,\n  });\n  return response.data.results;\n};\n","import styled from 'styled-components';\n\nexport const ActorsList = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n`;\n\nexport const ActorName = styled.p`\n  width: 100px;\n  text-align: center;\n`;\n","import { useEffect, useMemo, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieActorsById } from 'FetchAPI';\nimport { ActorsList, ActorName } from './Cast.styled';\n\nconst Cast = () => {\n  const [credits, setCredits] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const abortController = new AbortController();\n    const fetchActors = async () => {\n      try {\n        const actors = await fetchMovieActorsById(movieId, {\n          signal: abortController.signal,\n        });\n        setCredits(actors);\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n    fetchActors();\n\n    return () => {\n      abortController.abort();\n    };\n  }, [movieId]);\n\n  const popularActors = useMemo(\n    () => credits.filter(actor => actor.popularity > 10),\n    [credits]\n  );\n  console.log(popularActors);\n\n  return (\n    <ActorsList>\n      {popularActors.map(({ original_name, profile_path, id }) => (\n        <li key={id}>\n          <img\n            src={`https://image.tmdb.org/t/p/original/${profile_path}`}\n            alt={original_name}\n            width=\"100\"\n          />\n          <ActorName>{original_name}</ActorName>\n        </li>\n      ))}\n    </ActorsList>\n  );\n};\n\nexport default Cast;\n"],"names":["axios","fetchTrendingMovies","param","response","console","log","data","results","fetchMovieById","movieId","fetchMovieActorsById","cast","fetchMovieReviewsById","fetchSearchMovie","request","extraParam","params","language","query","include_adult","ActorsList","styled","ActorName","useState","credits","setCredits","useParams","useEffect","abortController","AbortController","fetchActors","signal","actors","message","abort","popularActors","useMemo","filter","actor","popularity","map","original_name","profile_path","id","src","alt","width"],"sourceRoot":""}