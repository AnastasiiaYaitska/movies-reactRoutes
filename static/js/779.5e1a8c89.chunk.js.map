{"version":3,"file":"static/js/779.5e1a8c89.chunk.js","mappings":"wTAEAA,EAAAA,EAAAA,SAAAA,QAAyB,+BACzBA,EAAAA,EAAAA,SAAAA,QAAAA,OAAAA,cACE,6NAEK,IAAMC,EAAmB,mCAAG,WAAMC,GAAN,uFACVF,EAAAA,EAAAA,IAAU,uBAAwBE,GADxB,cAC3BC,EAD2B,OAEjCC,QAAQC,IAAIF,EAASG,KAAKC,SAFO,kBAG1BJ,EAASG,KAAKC,SAHY,2CAAH,sDAMnBC,EAAc,mCAAG,WAAOC,EAASP,GAAhB,uFACLF,EAAAA,EAAAA,IAAA,iBAAoBS,GAAWP,GAD1B,cACtBC,EADsB,yBAErBA,EAASG,MAFY,2CAAH,wDAKdI,EAAoB,mCAAG,WAAOD,EAASP,GAAhB,uFACXF,EAAAA,EAAAA,IAAA,iBAAoBS,EAApB,YAAuCP,GAD5B,cAC5BC,EAD4B,yBAE3BA,EAASG,KAAKK,MAFa,2CAAH,wDAKpBC,EAAqB,mCAAG,WAAOH,EAASP,GAAhB,uFACZF,EAAAA,EAAAA,IAAA,iBAAoBS,EAApB,YAAuCP,GAD3B,cAC7BC,EAD6B,yBAE5BA,EAASG,KAAKC,SAFc,2CAAH,wDAKrBM,EAAgB,mCAAG,WAAOC,EAASC,GAAhB,uFACPf,EAAAA,EAAAA,IAAA,yBACrBgB,OAAQ,CACNC,SAAU,QACVC,MAAOJ,EACPK,eAAe,IAEdJ,IAPyB,cACxBZ,EADwB,yBASvBA,EAASG,KAAKC,SATS,2CAAH,uD,4JCzBhBa,EAAcC,EAAAA,GAAAA,GAAH,8HASXC,EAAaD,EAAAA,GAAAA,GAAH,0H,SCiCvB,EAvCgB,WACd,OAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQhB,GAAYiB,EAAAA,EAAAA,MAAZjB,QAmBR,OAjBAkB,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAkB,IAAIC,gBAEtBC,EAAY,mCAAG,8GAEYlB,EAAAA,EAAAA,IAAsBH,EAAS,CAC1DsB,OAAQH,EAAgBG,SAHT,OAEXC,EAFW,OAKjBP,EAAWO,GALM,gDAOjB5B,QAAQC,IAAI,KAAM4B,SAPD,yDAAH,qDAWlB,OADAH,IACO,kBAAMF,EAAgBM,OAAtB,CACR,GAAE,CAACzB,IACJL,QAAQC,IAAImB,IAEV,SAACJ,EAAD,UACGI,IAAY,GACXA,EAAQW,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACV,SAAChB,EAAD,WACE,gCACE,uBAAIe,KACJ,uBAAIC,QAHSF,EADP,KASZ,gEAIP,C","sources":["FetchAPI.js","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.headers.common['Authorization'] =\n  'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI4YTljNGVmNDAyODAwODUxODhjZWZjMmU4N2FmNmEwYyIsInN1YiI6IjY0MTk3YmI2MzEwMzI1MDA4NmY5OTkzOSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.q-ovqu-7T5oRDliML0kPyxUZJ15bJ1hjveunlXRTE9s';\n\nexport const fetchTrendingMovies = async param => {\n  const response = await axios.get('/trending/movie/week', param);\n  console.log(response.data.results);\n  return response.data.results;\n};\n\nexport const fetchMovieById = async (movieId, param) => {\n  const response = await axios.get(`/movie/${movieId}`, param);\n  return response.data;\n};\n\nexport const fetchMovieActorsById = async (movieId, param) => {\n  const response = await axios.get(`/movie/${movieId}/credits`, param);\n  return response.data.cast;\n};\n\nexport const fetchMovieReviewsById = async (movieId, param) => {\n  const response = await axios.get(`/movie/${movieId}/reviews`, param);\n  return response.data.results;\n};\n\nexport const fetchSearchMovie = async (request, extraParam) => {\n  const response = await axios.get(`/search/movie`, {\n    params: {\n      language: 'en-US',\n      query: request,\n      include_adult: false,\n    },\n    ...extraParam,\n  });\n  return response.data.results;\n};\n","import styled from 'styled-components';\n\nexport const ReviewsList = styled.ul`\n  padding-left: 0;\n\n  list-style: none;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n\nexport const ReviewItem = styled.li`\n  padding-right: 10px;\n  padding-left: 10px;\n  border: 1px solid black;\n  border-radius: 5px;\n`;\n","import { fetchMovieReviewsById } from 'FetchAPI';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ReviewsList, ReviewItem } from './Reviews.styled';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const abortController = new AbortController();\n\n    const movieReviews = async () => {\n      try {\n        const fetchedReviews = await fetchMovieReviewsById(movieId, {\n          signal: abortController.signal,\n        });\n        setReviews(fetchedReviews);\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n    movieReviews();\n    return () => abortController.abort();\n  }, [movieId]);\n  console.log(reviews);\n  return (\n    <ReviewsList>\n      {reviews !== [] ? (\n        reviews.map(({ id, author, content }) => (\n          <ReviewItem key={id}>\n            <article>\n              <p>{author}</p>\n              <p>{content}</p>\n            </article>\n          </ReviewItem>\n        ))\n      ) : (\n        <p>Unfortunately it's any reviews yet </p>\n      )}\n    </ReviewsList>\n  );\n};\n\nexport default Reviews;\n"],"names":["axios","fetchTrendingMovies","param","response","console","log","data","results","fetchMovieById","movieId","fetchMovieActorsById","cast","fetchMovieReviewsById","fetchSearchMovie","request","extraParam","params","language","query","include_adult","ReviewsList","styled","ReviewItem","useState","reviews","setReviews","useParams","useEffect","abortController","AbortController","movieReviews","signal","fetchedReviews","message","abort","map","id","author","content"],"sourceRoot":""}