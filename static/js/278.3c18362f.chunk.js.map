{"version":3,"file":"static/js/278.3c18362f.chunk.js","mappings":"wTAEAA,EAAAA,EAAAA,SAAAA,QAAyB,+BACzBA,EAAAA,EAAAA,SAAAA,QAAAA,OAAAA,cACE,6NAEK,IAAMC,EAAmB,mCAAG,WAAMC,GAAN,uFACVF,EAAAA,EAAAA,IAAU,uBAAwBE,GADxB,cAC3BC,EAD2B,yBAE1BA,EAASC,KAAKC,SAFY,2CAAH,sDAKnBC,EAAc,mCAAG,WAAOC,EAASL,GAAhB,uFACLF,EAAAA,EAAAA,IAAA,iBAAoBO,GAAWL,GAD1B,cACtBC,EADsB,yBAErBA,EAASC,MAFY,2CAAH,wDAKdI,EAAoB,mCAAG,WAAOD,EAASL,GAAhB,uFACXF,EAAAA,EAAAA,IAAA,iBAAoBO,EAApB,YAAuCL,GAD5B,cAC5BC,EAD4B,yBAE3BA,EAASC,KAAKK,MAFa,2CAAH,wDAKpBC,EAAqB,mCAAG,WAAOH,EAASL,GAAhB,uFACZF,EAAAA,EAAAA,IAAA,iBAAoBO,EAApB,YAAuCL,GAD3B,cAC7BC,EAD6B,yBAE5BA,EAASC,KAAKC,SAFc,2CAAH,wDAKrBM,EAAgB,mCAAG,WAAOC,EAASC,GAAhB,uFACPb,EAAAA,EAAAA,IAAA,yBACrBc,OAAQ,CACNC,SAAU,QACVC,MAAOJ,EACPK,eAAe,IAEdJ,IAPyB,cACxBV,EADwB,yBASvBA,EAASC,KAAKC,SATS,2CAAH,uD,iHCgD7B,UAtEe,WAAO,IAAD,EACnB,GAAoCa,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAA0BF,EAAAA,EAAAA,YAA1B,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMT,EAAK,UAAGQ,EAAaE,IAAI,gBAApB,QAAgC,GACrCC,GAAWC,EAAAA,EAAAA,MACjBC,QAAQC,IAAI,QAASH,IAErBI,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAkB,IAAIC,gBAC5B,GAAc,KAAVjB,EAAJ,CAGA,IAAMkB,EAAW,mCAAG,8GAEKvB,EAAAA,EAAAA,IAAiBK,EAAO,CAC3CmB,OAAQH,EAAgBG,SAHV,OAEVC,EAFU,OAKhBhB,EAAcgB,GALE,gDAOhBP,QAAQC,IAAI,KAAMO,SAPF,yDAAH,qDAYjB,OAFAH,IAEO,kBAAMF,EAAgBM,OAAtB,CAbN,CAcF,GAAE,CAACtB,IAiBJ,OACE,iCACE,kBAAMuB,SAZO,SAAAC,GAGf,GAFAA,EAAEC,sBAEYC,IAAVrB,GAAiC,KAAVA,EACzB,OAAOI,EAAgB,CAAC,GAG1BA,EAAgB,CAAET,MAAOK,IACzBC,EAAS,GACV,EAGG,WACE,mBAAOqB,QAAQ,GAAf,UACG,KACD,kBACEC,KAAK,OACLC,MAAOxB,EACPyB,KAAK,QACLC,SAxBgB,SAAAP,GACxB,IAAMxB,EAAQwB,EAAEQ,OAAOH,MACvBvB,EAASN,EACV,QAwBK,mBAAQ4B,KAAK,SAAb,wBAEF,wBACGzB,EAAW8B,KAAI,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,GAAV,OACd,2BACE,SAAC,KAAD,CAAMC,GAAE,UAAKD,GAAME,MAAO,CAAEC,KAAM3B,GAAlC,SACGuB,IACK,MAHDC,EADK,QAUvB,C","sources":["FetchAPI.js","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.headers.common['Authorization'] =\n  'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI4YTljNGVmNDAyODAwODUxODhjZWZjMmU4N2FmNmEwYyIsInN1YiI6IjY0MTk3YmI2MzEwMzI1MDA4NmY5OTkzOSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.q-ovqu-7T5oRDliML0kPyxUZJ15bJ1hjveunlXRTE9s';\n\nexport const fetchTrendingMovies = async param => {\n  const response = await axios.get('/trending/movie/week', param);\n  return response.data.results;\n};\n\nexport const fetchMovieById = async (movieId, param) => {\n  const response = await axios.get(`/movie/${movieId}`, param);\n  return response.data;\n};\n\nexport const fetchMovieActorsById = async (movieId, param) => {\n  const response = await axios.get(`/movie/${movieId}/credits`, param);\n  return response.data.cast;\n};\n\nexport const fetchMovieReviewsById = async (movieId, param) => {\n  const response = await axios.get(`/movie/${movieId}/reviews`, param);\n  return response.data.results;\n};\n\nexport const fetchSearchMovie = async (request, extraParam) => {\n  const response = await axios.get(`/search/movie`, {\n    params: {\n      language: 'en-US',\n      query: request,\n      include_adult: false,\n    },\n    ...extraParam,\n  });\n  return response.data.results;\n};\n","import { useEffect, useState } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport { fetchSearchMovie } from 'FetchAPI';\n\nconst Movies = () => {\n  const [queryMovie, setQueryMovie] = useState([]);\n  const [input, setInput] = useState();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n  const location = useLocation();\n  console.log('movie', location);\n\n  useEffect(() => {\n    const abortController = new AbortController();\n    if (query === '') {\n      return;\n    }\n    const searchMovie = async () => {\n      try {\n        const search = await fetchSearchMovie(query, {\n          signal: abortController.signal,\n        });\n        setQueryMovie(search);\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n    searchMovie();\n\n    return () => abortController.abort();\n  }, [query]);\n\n  const updateQueryString = e => {\n    const query = e.target.value;\n    setInput(query);\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n\n    if (input === undefined || input === '') {\n      return setSearchParams({});\n    }\n\n    setSearchParams({ query: input });\n    setInput('');\n  };\n  return (\n    <>\n      <form onSubmit={onSubmit}>\n        <label htmlFor=\"\">\n          {' '}\n          <input\n            type=\"text\"\n            value={input}\n            name=\"movie\"\n            onChange={updateQueryString}\n          />\n        </label>\n        <button type=\"submit\">Search</button>\n      </form>\n      <ul>\n        {queryMovie.map(({ title, id }) => (\n          <li key={id}>\n            <Link to={`${id}`} state={{ form: location }}>\n              {title}\n            </Link>{' '}\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["axios","fetchTrendingMovies","param","response","data","results","fetchMovieById","movieId","fetchMovieActorsById","cast","fetchMovieReviewsById","fetchSearchMovie","request","extraParam","params","language","query","include_adult","useState","queryMovie","setQueryMovie","input","setInput","useSearchParams","searchParams","setSearchParams","get","location","useLocation","console","log","useEffect","abortController","AbortController","searchMovie","signal","search","message","abort","onSubmit","e","preventDefault","undefined","htmlFor","type","value","name","onChange","target","map","title","id","to","state","form"],"sourceRoot":""}