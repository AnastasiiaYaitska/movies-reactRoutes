{"version":3,"file":"static/js/278.120b6add.chunk.js","mappings":"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","sources":["FetchAPI.js","components/MoviesLIst/MoviesList.styled.js","components/MoviesLIst/MoviesList.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.headers.common['Authorization'] =\n  'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI4YTljNGVmNDAyODAwODUxODhjZWZjMmU4N2FmNmEwYyIsInN1YiI6IjY0MTk3YmI2MzEwMzI1MDA4NmY5OTkzOSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.q-ovqu-7T5oRDliML0kPyxUZJ15bJ1hjveunlXRTE9s';\n\nexport const fetchTrendingMovies = async param => {\n  const response = await axios.get('/trending/movie/week', param);\n  return response.data.results;\n};\n\nexport const fetchMovieById = async (movieId, param) => {\n  const response = await axios.get(`/movie/${movieId}`, param);\n  return response.data;\n};\n\nexport const fetchMovieActorsById = async (movieId, param) => {\n  const response = await axios.get(`/movie/${movieId}/credits`, param);\n  return response.data.cast;\n};\n\nexport const fetchMovieReviewsById = async (movieId, param) => {\n  const response = await axios.get(`/movie/${movieId}/reviews`, param);\n  return response.data.results;\n};\n\nexport const fetchSearchMovie = async (request, extraParam) => {\n  const response = await axios.get(`/search/movie`, {\n    params: {\n      language: 'en-US',\n      query: request,\n      include_adult: false,\n    },\n    ...extraParam,\n  });\n  return response.data.results;\n};\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const List = styled.ul`\n  list-style: none;\n  padding-left: 0;\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n`;\n\nexport const MovieLink = styled(Link)`\n  text-decoration: none;\n  color: black;\n  &:hover,\n  &:focus {\n    color: orangered;\n  }\n`;\n","import { List, MovieLink } from 'components/MoviesLIst/MoviesList.styled';\nimport PropTypes from 'prop-types';\n\nexport const MoviesList = ({ movies, location, to }) => {\n  return (\n    <List>\n      {movies.map(({ title, id }) => (\n        <li key={id}>\n          <MovieLink\n            to={typeof to === 'string' ? to : to(id)}\n            state={{ from: location }}\n          >\n            {title}\n          </MovieLink>\n        </li>\n      ))}\n    </List>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(PropTypes.object).isRequired,\n  location: PropTypes.shape({}).isRequired,\n  to: PropTypes.func.isRequired,\n};\n","import { useEffect, useState } from 'react';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport { fetchSearchMovie } from 'FetchAPI';\nimport { MoviesList } from 'components/MoviesLIst/MoviesList';\n\nconst Movies = () => {\n  const [queryMovie, setQueryMovie] = useState([]);\n  const [input, setInput] = useState();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n  const location = useLocation();\n\n  useEffect(() => {\n    const abortController = new AbortController();\n    if (query === '') {\n      return;\n    }\n    const searchMovie = async () => {\n      try {\n        const search = await fetchSearchMovie(query, {\n          signal: abortController.signal,\n        });\n        setQueryMovie(search);\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n    searchMovie();\n\n    return () => abortController.abort();\n  }, [query]);\n\n  const updateQueryString = e => {\n    const query = e.target.value;\n    setInput(query);\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n\n    if (input === undefined || input === '') {\n      return setSearchParams({});\n    }\n\n    setSearchParams({ query: input });\n    setInput('');\n  };\n  return (\n    <>\n      <form onSubmit={onSubmit}>\n        <label htmlFor=\"\">\n          {' '}\n          <input\n            type=\"text\"\n            value={input}\n            name=\"movie\"\n            onChange={updateQueryString}\n          />\n        </label>\n        <button type=\"submit\">Search</button>\n      </form>\n      <MoviesList movies={queryMovie} to={id => `${id}`} location={location} />\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["axios","fetchTrendingMovies","param","response","data","results","fetchMovieById","movieId","fetchMovieActorsById","cast","fetchMovieReviewsById","fetchSearchMovie","request","extraParam","params","language","query","include_adult","List","styled","MovieLink","Link","MoviesList","movies","location","to","map","title","id","state","from","useState","queryMovie","setQueryMovie","input","setInput","useSearchParams","searchParams","setSearchParams","get","useLocation","useEffect","abortController","AbortController","searchMovie","signal","search","console","log","message","abort","onSubmit","e","preventDefault","undefined","htmlFor","type","value","name","onChange","target"],"sourceRoot":""}